from queue import PriorityQueue

import matplotlib.pyplot as plt
import seaborn as sns
sns.set()

class GraphicToolSearch:
    AVG_RAN = {(7, 3): 57, (12, 1): 46, (11, 11): 20, (7, 12): 64, (14, 4): 61, (13, 4): 160, (12, 12): 7, (0, 7): 22, (15, 1): 34, (0, 10): 19, (3, 7): 26, (2, 5): 166, (1, 11): 82, (8, 5): 63, (5, 8): 48, (4, 0): 151, (10, 8): 35, (9, 0): 4710, (6, 7): 4664, (5, 5): 5, (11, 5): 136, (10, 7): 39, (6, 10): 4941, (12, 6): 20, (15, 11): 10, (14, 1): 78, (13, 7): 131, (0, 4): 10, (15, 4): 22, (1, 1): 33, (8, 15): 75, (4, 10): 152, (3, 2): 25, (9, 14): 3563, (8, 2): 70, (5, 11): 35, (4, 5): 137, (10, 13): 32, (9, 3): 4241, (6, 0): 4653, (11, 0): 144, (7, 5): 50, (14, 15): 46, (12, 11): 31, (15, 14): 18, (14, 2): 86, (13, 10): 162, (0, 1): 9, (3, 12): 36, (1, 12): 72, (8, 12): 49, (4, 15): 141, (3, 1): 38, (2, 11): 211, (5, 14): 49, (10, 14): 40, (6, 13): 4245, (11, 15): 157, (7, 8): 77, (14, 8): 53, (13, 0): 162, (12, 8): 41, (15, 13): 9, (13, 13): 18, (0, 14): 22, (3, 11): 41, (2, 1): 152, (1, 15): 71, (8, 9): 0, (4, 12): 122, (2, 12): 152, (9, 4): 4602, (5, 1): 33, (10, 3): 43, (7, 2): 72, (6, 14): 3652, (12, 2): 56, (11, 10): 160, (7, 15): 71, (14, 5): 60, (13, 3): 154, (12, 13): 25, (15, 0): 24, (1, 5): 67, (0, 11): 23, (3, 6): 35, (2, 2): 81, (1, 10): 72, (4, 1): 167, (9, 7): 3669, (6, 4): 2425, (5, 4): 35, (11, 4): 193, (10, 4): 37, (7, 1): 60, (6, 11): 2680, (12, 7): 39, (15, 10): 21, (0, 5): 17, (15, 7): 18, (1, 0): 61, (0, 8): 18, (4, 11): 230, (3, 5): 39, (2, 7): 199, (9, 13): 3980, (8, 3): 71, (5, 10): 41, (4, 6): 8, (10, 10): 12, (9, 2): 4044, (6, 1): 3830, (5, 7): 35, (11, 3): 142, (7, 4): 77, (14, 12): 71, (12, 4): 59, (14, 3): 71, (0, 2): 12, (3, 15): 43, (1, 3): 53, (8, 13): 74, (4, 8): 177, (3, 0): 42, (2, 8): 120, (9, 8): 4284, (8, 0): 65, (5, 13): 23, (10, 15): 33, (6, 2): 4791, (11, 14): 180, (7, 11): 25, (15, 12): 24, (13, 12): 157, (0, 15): 18, (3, 10): 42, (1, 14): 66, (8, 10): 71, (4, 13): 111, (2, 13): 126, (9, 11): 5560, (5, 0): 38, (10, 0): 40, (6, 15): 4289, (12, 3): 34, (11, 13): 111, (7, 14): 56, (14, 10): 72, (13, 2): 103, (12, 14): 23, (15, 3): 17, (13, 15): 146, (1, 4): 38, (0, 12): 17, (2, 3): 158, (8, 7): 70, (4, 2): 132, (2, 14): 162, (6, 5): 3431, (5, 3): 38, (11, 7): 153, (10, 5): 40, (7, 0): 72, (6, 8): 4722, (12, 0): 38, (11, 8): 178, (7, 13): 50, (14, 7): 63, (13, 5): 165, (15, 6): 28, (1, 7): 61, (3, 4): 27, (2, 4): 243, (9, 12): 4331, (8, 4): 52, (5, 9): 34, (4, 7): 159, (10, 11): 60, (9, 1): 4828, (11, 2): 77, (7, 7): 20, (14, 13): 52, (12, 5): 47, (15, 8): 26, (14, 0): 74, (13, 8): 175, (0, 3): 14, (15, 5): 23, (3, 14): 48, (1, 2): 59, (8, 14): 68, (4, 9): 250, (3, 3): 11, (9, 15): 4620, (8, 1): 73, (5, 12): 44, (4, 4): 75, (10, 12): 51, (6, 3): 4789, (11, 1): 126, (7, 10): 81, (14, 14): 20, (12, 10): 37, (15, 15): 3, (13, 11): 152, (0, 0): 3, (3, 13): 35, (1, 13): 69, (8, 11): 86, (4, 14): 165, (2, 10): 155, (9, 10): 4068, (5, 15): 41, (10, 1): 49, (6, 12): 4661, (11, 12): 160, (14, 11): 52, (13, 1): 111, (12, 15): 43, (15, 2): 23, (13, 14): 168, (0, 13): 16, (3, 8): 43, (2, 0): 161, (1, 8): 69, (8, 8): 10, (4, 3): 161, (2, 15): 168, (9, 5): 4786, (5, 2): 55, (10, 2): 32}
    AVG_HILL = {(7, 3): 34, (6, 9): 1071, (12, 1): 29, (11, 11): 0, (7, 12): 37, (14, 4): 39, (13, 4): 74, (12, 12): 0, (0, 7): 14, (15, 1): 23, (0, 10): 12, (3, 7): 11, (2, 5): 112, (1, 11): 37, (8, 5): 51, (5, 8): 24, (4, 0): 112, (10, 8): 13, (9, 0): 2276, (6, 7): 2855, (5, 5): 0, (11, 5): 95, (10, 7): 21, (6, 10): 2424, (15, 11): 5, (14, 1): 41, (13, 7): 79, (0, 4): 11, (15, 4): 11, (1, 1): 0, (8, 15): 57, (4, 10): 103, (3, 2): 13, (9, 14): 2541, (8, 2): 20, (5, 11): 18, (4, 5): 109, (10, 13): 23, (9, 3): 2282, (6, 0): 2313, (11, 0): 109, (7, 5): 40, (14, 15): 35, (12, 11): 21, (15, 14): 12, (14, 2): 39, (13, 10): 63, (0, 1): 9, (3, 12): 25, (1, 12): 48, (8, 12): 44, (4, 15): 120, (3, 1): 15, (2, 11): 127, (5, 14): 27, (10, 14): 10, (6, 13): 2747, (11, 15): 72, (7, 8): 47, (14, 8): 35, (13, 0): 99, (12, 8): 6, (15, 13): 11, (13, 13): 0, (0, 14): 19, (3, 11): 8, (2, 1): 105, (1, 15): 61, (4, 12): 108, (2, 12): 116, (9, 4): 1295, (5, 1): 12, (10, 3): 33, (7, 2): 59, (6, 14): 2488, (12, 2): 22, (11, 10): 88, (7, 15): 45, (14, 5): 43, (13, 3): 87, (12, 13): 10, (15, 0): 18, (1, 5): 45, (0, 11): 14, (2, 2): 0, (1, 10): 49, (4, 1): 119, (9, 7): 1882, (6, 4): 2463, (5, 4): 9, (11, 4): 52, (10, 4): 19, (7, 1): 37, (6, 11): 1592, (12, 7): 26, (15, 10): 11, (0, 5): 11, (15, 7): 12, (1, 0): 52, (0, 8): 12, (4, 11): 87, (3, 5): 27, (2, 7): 133, (9, 13): 1501, (8, 3): 60, (5, 10): 23, (4, 6): 22, (10, 10): 0, (9, 2): 2409, (6, 1): 1983, (5, 7): 11, (11, 3): 93, (7, 4): 32, (14, 12): 40, (12, 4): 11, (14, 3): 46, (0, 2): 5, (3, 15): 28, (1, 3): 40, (8, 13): 33, (4, 8): 83, (3, 0): 28, (2, 8): 106, (9, 8): 2108, (8, 0): 66, (5, 13): 6, (10, 15): 24, (6, 2): 1511, (11, 14): 98, (7, 11): 43, (15, 12): 14, (13, 12): 85, (0, 15): 11, (3, 10): 38, (1, 14): 52, (8, 10): 45, (4, 13): 133, (2, 13): 132, (9, 11): 1345, (5, 0): 28, (10, 0): 28, (6, 15): 2169, (12, 3): 27, (11, 13): 47, (7, 14): 55, (14, 10): 41, (13, 2): 75, (12, 14): 10, (15, 3): 15, (13, 15): 81, (1, 4): 28, (0, 12): 13, (2, 3): 91, (8, 7): 51, (4, 2): 70, (2, 14): 139, (6, 5): 2268, (5, 3): 23, (11, 7): 78, (10, 5): 21, (7, 0): 48, (6, 8): 2351, (12, 0): 28, (11, 8): 103, (7, 13): 27, (14, 7): 37, (13, 5): 90, (1, 7): 46, (3, 4): 19, (2, 4): 76, (9, 12): 2683, (8, 4): 27, (4, 7): 105, (10, 11): 14, (9, 1): 2218, (11, 2): 81, (7, 7): 0, (14, 13): 35, (12, 5): 30, (15, 8): 19, (14, 0): 51, (13, 8): 90, (0, 3): 14, (15, 5): 14, (3, 14): 28, (1, 2): 40, (8, 14): 54, (3, 3): 0, (9, 15): 2572, (8, 1): 47, (5, 12): 35, (4, 4): 0, (10, 12): 29, (6, 3): 2441, (11, 1): 91, (7, 10): 56, (14, 14): 0, (12, 10): 27, (15, 15): 0, (13, 11): 53, (0, 0): 0, (3, 13): 17, (1, 13): 51, (8, 11): 33, (4, 14): 119, (2, 10): 99, (9, 10): 2204, (5, 15): 27, (10, 1): 29, (6, 12): 2271, (11, 12): 86, (14, 11): 50, (13, 1): 110, (12, 15): 21, (15, 2): 14, (13, 14): 76, (0, 13): 10, (3, 8): 29, (2, 0): 122, (1, 8): 34, (8, 8): 0, (4, 3): 113, (2, 15): 100, (9, 5): 2450, (5, 2): 16, (11, 6): 16, (10, 2): 7}

    @staticmethod
    def box_plot():
        data_groups = []
        q = []
        for m in GraphicToolSearch.AVG_RAN.keys():
            if m in GraphicToolSearch.AVG_HILL.keys():
                q.append(m)
        q.sort()
        ran = []
        hill = []

        for i in range(16):
            cur_data_ran = []
            cur_data_hill = []
            for j in q:
                if j[0] == i:
                    cur_data_ran.append(GraphicToolSearch.AVG_RAN[j])
                    cur_data_hill.append(GraphicToolSearch.AVG_HILL[j])
            ran.append(cur_data_ran)
            hill.append(cur_data_hill)

        data_groups.append(ran)
        data_groups.append(hill)

        x = []
        for s in range(16):
            x.append(s)

        print(len(data_groups[0]))
        xlocations = range(len(data_groups[0]))
        width = 0.3
        symbol = 'r+'
        ymin = 0
        ymax = 180

        ax = plt.gca()
        ax.set_ylim(ymin, ymax)
        ax.set_xticklabels(x, rotation=0)
        ax.set_axisbelow(True)
        ax.set_xticks(xlocations)
        plt.xlabel('Target Phenotype')
        plt.ylabel('Number of Steps')
        plt.title('Plots Search')

        positions_group1 = [x - (width / 2 + 0.01) for x in xlocations]
        positions_group2 = [x + (width / 2 + 0.01) for x in xlocations]

        ax1 = plt.boxplot(data_groups[0],
                    labels=[''] * len(x),
                    sym=symbol,
                    positions=positions_group1,
                    patch_artist=True,
                    widths=width,
                    )

        ax2 = plt.boxplot(data_groups[1],
                    labels=[''] * len(x),
                    sym=symbol,
                    positions=positions_group2,
                    patch_artist=True,
                    widths=width,
                    )

        def set_box_color(bp, color):
            plt.setp(bp['boxes'], color=color)
            plt.setp(bp['whiskers'], color=color)
            plt.setp(bp['caps'], color=color)
            plt.setp(bp['medians'], color= '#636363')

        set_box_color(ax1, '#2b8cbe')
        set_box_color(ax2, '#7fcdbb')

        plt.plot([], c='#edf8b1', label='Random Walk')
        plt.plot([], c='#7fcdbb', label='Hill Climbing')
        # show a legend on the plot
        plt.legend(loc = 9, prop={'size': 10})
        # Display a figure.
        plt.show()



GraphicToolSearch.box_plot()